
Use Case Description and Scope:
The purpose of the POC is to determine if the 3Forge system is suitable as the basis for a market surveillance system. In the diagram below, the ingesters, data store, and data store API will be 3Forge components.
 
The ingesters will consume data, in several different formats such as but not limited to FIX, JSON, CSV, raw text, FIXML, into the data store.
 
The store will serve as the repository for all alert generation data (required reference data, and order/trade data). The system shall support up to N trading sessions, 3 for POC, and persist the data, 120 calendar days for production ‘hot’.
 
Application access to the 3Forge data store will be via web API. The API will support business level abstractions and access to the raw data in the store. 
 
Example API requests (but not limited to): 
·	Iterators: 
o	Iterate over all events in the store, 
o	Iterate with filters (i.e. all events in a session, all events related to a firm, all events related to an account, all events related to a symbol). These filters can be combined, for example, iterate over all events for a session that are for a given symbol, or iterate over all events for a session that are for a firm, or iterate over all events for a session that are that are for an account and for a given symbol. 
·	Get order information given a Client Order Id. 
·	Get a complete set of order events for the complete order lifecycle. 
·	Get a book structure given a session, symbol, and timestamp, this calculates a book based on the order events for the given session and symbol up to the given timestamp. – Note: this item will not be delivered within the POC but the approach to build and deliver is to be discussed.
·	Triggers/eventing, service calls when new data is added to certain tables in the data store. Filters will be supported for the triggers as well. 
 
The initial MEMX test application for the POC will be a surveillance analytics engine.  It will run market surveillance patterns to detect anomalies in the data and store the results. Then external applications will use the 3Forge API to access surveillance, reference, and market data.

 
 
3forge will be supplied with FIX message specifications, and reference data file formats for this use case as well as message rates, and daily capacities and/or file sizes. 
 
•	The POC will be based on equities data only.
•	The total number of instruments in the reference data is approximately 11,500 equites symbols.
•	The total number of firms is approximately 300.
•	The total number of messages per day is approximately 800 million. They will be streaming into 3forge with 2 FIX drop copy sessions at a rate of ??? messages per second.
•	Specify the number of days and messages per day
•	The total number of orders per day is approximately 300 million.
•	The total number of trades per day is approximately 2.75 million.
•	The maximum number of events per symbol per day is approximately 10 million.
 - 
We will also require multiple streams of FIX input based on N number of markets/products, and data splitting.

3forge Responsibilities:
•	Development or assist the customer in the development of the software to meet the requirements in the Use Case described above.
•	Delivery of developed software and associated documentation
•	Assist Customer with the installation and configuration of the software
•	Provide Customer with training of staff engaged in the evaluation of the POC
•	Respond to Customer questions and reports of deficiencies
•	Provide hardware recommendation for Customer evaluation environment
•	Chair regular POC project update meetings and provide progress plan & ensure on-time completion.
Customer Responsibilities:
•	Setup and Configure Evaluation System / Testing Environment for POC
•	Install and configure software supplied by 3forge
•	Perform evaluation testing and report any issues or deficiencies to 3forge ASAP
•	Attend weekly project update meetings
•	Accept 3forge POC software once evaluation testing is complete.
Project Resources:
3forge Project Manager: Rick Barber (rick.barber@3forge.com)
3forge Business Contact: Peter Sibirzeff (peter.sibirzeff@3forge.com)
3forge Technical Contact: Mir Ahmed (mir.ahmed@3forge.com)
Customer Project Manager:  Priyanka Vellanki
Customer Business Contact: Adam Santamaria
Customer Technical Contact: Craig Smith & Adam Santamaria
Project Plan / Schedule: 
POC Project Start Date:  March 2024
Evaluation Environment ready for software installation:
Evaluation Environment ready for POC testing:
Target date for completion of testing and acceptance:
Hardware Recommendation:
MEMX to provide four (4) of the below specified machines for the UAT environment to be used in the POC.
OPERATING SYSTEM	Unix environment with Java 1.8 or later
RAM	376GB
DISK	100GB or more
PROCESSOR	3GHZ CPU with 31 cores
CLIENT BROWSER	Up-to-date version of: Microsoft Edge, Chrome, Firefox
ACCESS	Must have permissions to install software (often requiring Admin rights on Windows)
NETWORK	Server must have access to data sources. Firewalls should also be enabled to allow connections to port 33332
Use Case Architecture Diagram:
-	Referencing the diagram in section Use Case Description and Scope, the POC will entail a surveillance system with the components shown in the diagram. It will be developed, deployed, and connect via multiple (at least 2) FIX drops to the MEMX Development Environment (MDE). MDE reference data and order/trade flow will be ingested into the data store. The basics of the Data Store API will be developed. An analytics engine will be implemented using the Data Store API. The system will process the MDE reference data and order flow and will run 2 surveillance patterns.  

Proof of Concept Success Criteria:
Success will be, MEMX being able to:
•	Successfully deploy software supplied by 3forge in the MEMX UAT environment.
•	Implement/deploy at least 2 FIX drop ingesters to connect to the MEMX MDE system and store order/trade data in a 3forge store
•	Implement/deploy reference data ingesters to read and store reference data (JSON and CSV) into a 3forge store
•	Implement a basic Data Store API.
•	Run algorithms using their data API to find trading patterns: multi-day surveillance and painting the tape, 
•	Run test market surveillance patterns that attempt to identify market manipulation, and inserts the results into the persisted data store.
•	The system needs to persist the reference data and order/trade data across several sessions (days).


