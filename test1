import sqlite3
import datetime
import csv

def calculate_trading_time(start_time, end_time):
    """Calculate trading time duration in minutes."""
    start_hour, start_minute = map(int, start_time.split(':'))
    end_hour, end_minute = map(int, end_time.split(':'))
    total_minutes = (end_hour - start_hour) * 60 + (end_minute - start_minute)
    return total_minutes

def calculate_quote_duration(quote_timestamps, trading_time):
    """Calculate quote duration percentage."""
    if not quote_timestamps:
        return 0.0
    
    trading_duration = datetime.timedelta(minutes=trading_time)
    quote_duration = datetime.timedelta()
    last_quote_time = None
    
    for timestamp in quote_timestamps:
        quote_time = datetime.datetime.strptime(timestamp[:19], '%Y-%m-%dT%H:%M:%S')
        if last_quote_time is not None:
            time_difference = (quote_time - last_quote_time).total_seconds()
            if time_difference >= 0 and last_quote_time.time() >= datetime.time(9, 30):
                quote_duration += min(trading_duration - quote_duration, datetime.timedelta(seconds=time_difference))
        last_quote_time = quote_time
    
    return quote_duration.total_seconds() / trading_duration.total_seconds()

def generate_report(conn, output_file):
    cursor = conn.cursor()
    # Calculate trading time duration
    trading_time = calculate_trading_time('9:30', '16:15')

    # Query to retrieve all distinct AccountId/UnderlyingSymbol pairs from MM table
    cursor.execute("""
        SELECT DISTINCT m.firmId, m.UnderlyingSymbol
        FROM MM m
    """)
    account_underlier_pairs = cursor.fetchall()

    # Query to retrieve quote timestamps for each AccountId/UnderlyingSymbol pair
    report_data = []
    for account_id, underlier_symbol in account_underlier_pairs:
        cursor.execute("""
            SELECT Timestamp
            FROM Quotes
            WHERE AccountId = ? AND UnderlyingSymbol = ?
            ORDER BY Timestamp
        """, (account_id, underlier_symbol))
        quote_timestamps = [datetime.datetime.fromisoformat(row[0]) for row in cursor.fetchall()]
        quote_duration_percentage = calculate_quote_duration(quote_timestamps, trading_time)
        report_data.append((account_id, underlier_symbol, quote_duration_percentage))

    # Write report data to CSV
    with open(output_file, 'w', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(["AccountId", "UnderlyingSymbol", "Quote Duration Percentage"])
        for row in report_data:
            csv_writer.writerow(row)

def main():
    # Connect to SQLite database
    conn = sqlite3.connect('my_database.db')

    # Define output CSV file
    output_file = 'report.csv'

    # Generate report
    generate_report(conn, output_file)

    # Close connection
    conn.close()

if __name__ == "__main__":
    main()
