PostgreSQL Database Schema Design
Tables Overview:

Trades: Stores detailed information about each trade.
Orders: Stores order details, including attempts that may not result in trades.
Alerts: Logs alerts generated by the surveillance engine.
Audit: Tracks changes and actions taken within the system.
Users: Manages user information and roles.
Schema Details:

Trades Table:

trade_id: Primary Key
security_id: Foreign Key (links to Securities table)
broker_id: Foreign Key (links to Brokers table)
trade_volume: Integer
trade_price: Decimal
timestamp: DateTime
Orders Table:

order_id: Primary Key
security_id: Foreign Key
broker_id: Foreign Key
order_type: Text (e.g., buy, sell)
order_volume: Integer
order_price: Decimal
status: Text (e.g., executed, cancelled)
timestamp: DateTime
Alerts Table:

alert_id: Primary Key
type: Text (e.g., spoofing, wash sale)
description: Text
relevant_trade_id: Foreign Key (links to Trades table)
relevant_order_id: Foreign Key (links to Orders table)
timestamp: DateTime
Audit Table:

audit_id: Primary Key
user_id: Foreign Key (links to Users table)
action: Text
description: Text
timestamp: DateTime
Users Table:

user_id: Primary Key
username: Text
role: Text
password_hash: Text
Indexes:

Indexes on timestamp fields in Trades, Orders, and Alerts tables for faster query performance.
Indexes on security_id and broker_id in Trades and Orders to speed up joins and searches.
Security:

Implement role-based access control at the database level.
Use encryption for sensitive data like password_hash in Users table.
Performance Considerations:

Use partitioning on the Trades and Orders tables based on timestamp to manage large datasets efficiently.
Consider using connection pooling to manage database connections and optimize performance.
