import sqlite3
import datetime

def calculate_trading_time(start_time, end_time):
    """Calculate trading time duration in minutes."""
    start_hour, start_minute = map(int, start_time.split(':'))
    end_hour, end_minute = map(int, end_time.split(':'))
    total_minutes = (end_hour - start_hour) * 60 + (end_minute - start_minute)
    return total_minutes

def calculate_quote_duration(quote_timestamps, trading_time):
    """Calculate quote duration percentage."""
    if not quote_timestamps:
        return 0.0
    
    trading_duration = datetime.timedelta(minutes=trading_time)
    total_quote_duration = sum((timestamp - quote_timestamps[i - 1] for i, timestamp in enumerate(quote_timestamps) if i > 0 and timestamp.time() >= datetime.time(9, 30)), datetime.timedelta())
    
    return total_quote_duration.total_seconds() / trading_duration.total_seconds()

def generate_report(conn):
    cursor = conn.cursor()
    # Calculate trading time duration
    trading_time = calculate_trading_time('9:30', '16:15')

    # Query to retrieve all distinct AccountId/UnderlyingSymbol pairs from MM table
    cursor.execute("""
        SELECT DISTINCT m.firmId, m.UnderlyingSymbol
        FROM MM m
    """)
    account_underlier_pairs = cursor.fetchall()

    # Query to retrieve quote timestamps for each AccountId/UnderlyingSymbol pair
    report_data = []
    for account_id, underlier_symbol in account_underlier_pairs:
        cursor.execute("""
            SELECT Timestamp
            FROM Quotes
            WHERE AccountId = ? AND UnderlyingSymbol = ?
            ORDER BY Timestamp
        """, (account_id, underlier_symbol))
        quote_timestamps = [datetime.datetime.fromisoformat(row[0]) for row in cursor.fetchall()]
        quote_duration_percentage = calculate_quote_duration(quote_timestamps, trading_time)
        report_data.append((account_id, underlier_symbol, quote_duration_percentage))

    # Filter results to include only those with at least 60% quote duration
    filtered_results = [(account_id, underlier_symbol, quote_duration_percentage)
                        for account_id, underlier_symbol, quote_duration_percentage in report_data
                        if quote_duration_percentage >= 0.6]

    return filtered_results

def main():
    # Connect to SQLite database
    conn = sqlite3.connect('my_database.db')

    # Generate report
    report = generate_report(conn)

    # Print report
    print("AccountId | UnderlyingSymbol | Quote Duration Percentage")
    for row in report:
        print(row)

    # Close connection
    conn.close()

if __name__ == "__main__":
    main()







import sqlite3
import csv

def create_tables(conn):
    """Create tables if they don't exist."""
    cursor = conn.cursor()
    
    # Quotes table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Quotes (
            Timestamp TEXT,
            AccountId TEXT,
            RequestEventType TEXT,
            UnderlyingSymbol TEXT
        )
    """)
    
    # MM table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS MM (
            firmId TEXT,
            UnderlyingSymbol TEXT
        )
    """)
    
    # ReferenceData table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS ReferenceData (
            ExchangeTradingState TEXT,
            UnderlyingSymbol TEXT,
            IsActive INTEGER,
            OptionId TEXT
        )
    """)
    
    conn.commit()

def insert_quotes_data(conn, data):
    """Insert data into the Quotes table."""
    cursor = conn.cursor()
    cursor.executemany("""
        INSERT INTO Quotes (Timestamp, AccountId, RequestEventType, UnderlyingSymbol) VALUES (?, ?, ?, ?)
    """, data)
    conn.commit()

def insert_mm_data(conn, data):
    """Insert data into the MM table."""
    cursor = conn.cursor()
    cursor.executemany("""
        INSERT INTO MM (firmId, UnderlyingSymbol) VALUES (?, ?)
    """, data)
    conn.commit()

def insert_reference_data(conn, data):
    """Insert data into the ReferenceData table."""
    cursor = conn.cursor()
    cursor.executemany("""
        INSERT INTO ReferenceData (ExchangeTradingState, UnderlyingSymbol, IsActive, OptionId) VALUES (?, ?, ?, ?)
    """, data)
    conn.commit()

def read_quotes_csv(file_path):
    """Read data from Quotes.csv."""
    with open(file_path, 'r') as file:
        csv_reader = csv.DictReader(file)
        data = [(row['Timestamp'], row['AccountId'], row['RequestEventType'], row['UnderlyingSymbol']) for row in csv_reader]
    return data

def read_mm_csv(file_path):
    """Read data from mm.csv."""
    with open(file_path, 'r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # Skip header row
        data = []
        for row in csv_reader:
            firm_id = row[0]
            underliers = row[2:]  # Skip the first two columns (firmId and numSymbols)
            for underlier in underliers:
                data.append((firm_id, underlier))
    return data

def read_reference_data_csv(file_path):
    """Read data from ReferenceData.csv."""
    with open(file_path, 'r') as file:
        csv_reader = csv.DictReader(file)
        data = [(row['ExchangeTradingState'], row['UnderlyingSymbol'], row['IsActive'], row['OptionId']) for row in csv_reader]
    return data

def main():
    # Connect to SQLite database
    conn = sqlite3.connect('my_database.db')

    # Create tables if they don't exist
    create_tables(conn)
    
    # Read data from Quotes.csv
    quotes_data = read_quotes_csv('Quotes.csv')

    # Insert data into Quotes table
    insert_quotes_data(conn, quotes_data)
    
    # Read data from mm.csv
    mm_data = read_mm_csv('mm.csv')

    # Insert data into MM table
    insert_mm_data(conn, mm_data)

    # Read data from ReferenceData.csv
    reference_data = read_reference_data_csv('ReferenceData.csv')

    # Insert data into ReferenceData table
    insert_reference_data(conn, reference_data)

    # Close connection
    conn.close()

if __name__ == "__main__":
    main()










ReferenceData.csv

ExchangeTradingState	IsAdministrative	EQ_IsPennyPilot	EQ_IsETP	EQ_IsActive	EQ_DefaultTradingState	EQ_RegulatoryTradingState	EQ_ExchangeTradingState	EQ_IsAdministrativeHalted	EQ_OpenedOrClosedState	EQ_Timestamp	OptionId	UnderlyingSymbol	OptionRootCode	IsTest	IsActive	IsRoutable	IsClosingOnly	DefaultTradingState	PutCallCode	ExpirationMonth	ExpirationDay	ExpirationYear	StrikePrice	SeriesIndex
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixlX	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	100	1
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixlY	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	105	2
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixlZ	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	110	3
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixm0	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	115	4
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixm1	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	120	5
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixm2	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	125	6
Trading	FALSE	FALSE	FALSE	TRUE	Auto	Trading	Trading	FALSE	AdministrativelyOpened	2024-04-09T07:06:27.424161086	A001ixm3	A	A	FALSE	TRUE	TRUE	FALSE	Auto	Put	4	19	24	130	7

Quotes.csv

SourceId	Sequence	Timestamp	AccountId	RequestId	RequestEventType	ReasonCode	ReasonDetails	EFID	UnderlyingSymbol
MATCH02	6,355,876	2024-04-09T12:16:17.754012988	OPE2S10	216,316,818,137,023,000	Done				NUE
MATCH02	6,355,876	2024-04-09T12:16:17.754012988	OPE2S10	216,316,818,137,023,000	Accepted			MT24	NUE
MATCH02	6,355,811	2024-04-09T12:16:17.447418301	OPE2S12	216,279,434,741,678,000	Done				NUE
MATCH02	6,355,811	2024-04-09T12:16:17.447418301	OPE2S12	216,279,434,741,678,000	Accepted			MT25	NUE
MATCH02	6,331,291	2024-04-09T12:15:57.174027268	OPE2S10	216,316,818,137,023,000	Done				NUE

mm.csv

firmId	numSymbols	optionClass	optionClass	...	optionClass								
CITMODE1	10	AMZN	UBER	XOM	GOOG	SBUX	PYPL	SOFI	AAPL	SPY	AMD		
GLTESTT2	5	ABCD	DCBA	AAPL	TEST	GOOG							
IMCC10	12	BB	BOIL	BSX	BUD	C	CAT	CHK	CMG	COIN	DPST	ED	EL
