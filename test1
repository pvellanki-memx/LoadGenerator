import sqlite3
import datetime

def calculate_trading_time(start_time, end_time):
    """Calculate trading time duration in minutes."""
    start_hour, start_minute = map(int, start_time.split(':'))
    end_hour, end_minute = map(int, end_time.split(':'))
    total_minutes = (end_hour - start_hour) * 60 + (end_minute - start_minute)
    return total_minutes

def calculate_quote_duration(quote_timestamps, trading_time):
    """Calculate quote duration percentage."""
    if not quote_timestamps:
        return 0.0
    
    trading_duration = datetime.timedelta(minutes=trading_time)
    quote_duration = datetime.timedelta()
    last_quote_time = None
    
    for timestamp in quote_timestamps:
        quote_time = datetime.datetime.strptime(timestamp[:19], '%Y-%m-%dT%H:%M:%S')
        if last_quote_time is not None:
            time_difference = (quote_time - last_quote_time).total_seconds()
            if time_difference >= 0 and last_quote_time.time() >= datetime.time(9, 30):
                quote_duration += min(trading_duration - quote_duration, datetime.timedelta(seconds=time_difference))
        last_quote_time = quote_time
    
    return quote_duration.total_seconds() / trading_duration.total_seconds()


def generate_report(conn):
    cursor = conn.cursor()
    # Calculate trading time duration
    trading_time = calculate_trading_time('9:30', '16:15')

    # Query to retrieve all distinct AccountId/UnderlyingSymbol pairs from MM table
    cursor.execute("""
        SELECT DISTINCT m.firmId, m.UnderlyingSymbol
        FROM MM m
    """)
    account_underlier_pairs = cursor.fetchall()

    # Query to retrieve quote timestamps for each AccountId/UnderlyingSymbol pair
    report_data = []
    for account_id, underlier_symbol in account_underlier_pairs:
        cursor.execute("""
            SELECT Timestamp
            FROM Quotes
            WHERE AccountId = ? AND UnderlyingSymbol = ?
            ORDER BY Timestamp
        """, (account_id, underlier_symbol))
        quote_timestamps = [datetime.datetime.fromisoformat(row[0]) for row in cursor.fetchall()]
        print(f"Quote timestamps for {account_id}/{underlier_symbol}: {quote_timestamps}")
        quote_duration_percentage = calculate_quote_duration(quote_timestamps, trading_time)
        report_data.append((account_id, underlier_symbol, quote_duration_percentage))

    # Filter results to include only those with at least 60% quote duration
    filtered_results = [(account_id, underlier_symbol, quote_duration_percentage)
                        for account_id, underlier_symbol, quote_duration_percentage in report_data
                        if quote_duration_percentage >= 0.6]

    return filtered_results

def main():
    # Connect to SQLite database
    conn = sqlite3.connect('my_database.db')

    # Generate report
    report = generate_report(conn)

    # Print report
    print("AccountId | UnderlyingSymbol | Quote Duration Percentage")
    for row in report:
        print(row)

    # Close connection
    conn.close()

if __name__ == "__main__":
    main()



DeephavenPartitionID	SessionId	SourceId	Sequence	Timestamp	AccountId	FirmId	IsTest	IsActive	IsCancelInDisconnect	DefaultEFID	IsRiskIdFilteringEnabled	IsEFIDFilteringEnabled	IsMTPGroupIdFilteringEnabled	IsCancelGroupIdFilteringEnabled
4/9/24	CC01.1712660509	ACCTSPIN	507	2024-04-09T07:04:46.458495926	BOFAODE1	BOAME100	FALSE	TRUE	TRUE	MLCC	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	510	2024-04-09T07:04:46.458496987	BOFAODE2	BOAME100	FALSE	TRUE	TRUE	MLCC	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	513	2024-04-09T07:04:46.458497881	BOFAODE3	BOAME100	FALSE	TRUE	TRUE	MLCC	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	516	2024-04-09T07:04:46.458498734	CDRGTE01	CDRGMODE	FALSE	TRUE	FALSE	CDRG	FALSE	FALSE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	517	2024-04-09T07:04:46.458499006	CDRGTE02	CDRGMODE	FALSE	TRUE	FALSE	CDRG	FALSE	FALSE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	518	2024-04-09T07:04:46.458499290	CITAODE1	CITMODE1	FALSE	TRUE	TRUE	CDGO	FALSE	FALSE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	519	2024-04-09T07:04:46.458499560	CITAODE2	CITMODE1	FALSE	TRUE	TRUE	CDGO	FALSE	FALSE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	520	2024-04-09T07:04:46.458499828	DASHTE10	DASHOTT1	FALSE	TRUE	TRUE	DFIN	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	522	2024-04-09T07:04:46.458500369	DASHTE11	DASHOTT1	FALSE	TRUE	TRUE	DFIN	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	524	2024-04-09T07:04:46.458500918	DASHTE13	DASHOTT1	FALSE	TRUE	FALSE	DFIN	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	526	2024-04-09T07:04:46.458501465	DASHTE14	DASHOTT1	FALSE	TRUE	FALSE	DFIN	FALSE	TRUE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	528	2024-04-09T07:04:46.458502001	GEBRTE01	GEBMDE1	FALSE	TRUE	FALSE	GEBB	FALSE	FALSE	FALSE	FALSE
4/9/24	CC01.1712660509	ACCTSPIN	529	2024-04-09T07:04:46.458502273	GSCOOTT1	GOLMX200	FALSE	TRUE	TRUE	GSCT	FALSE	FALSE	FALSE	FALSE
